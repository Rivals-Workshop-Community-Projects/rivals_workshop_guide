(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{472:function(e,t,a){"use strict";a.r(t);var s=a(26),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"objects-and-instances"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#objects-and-instances"}},[e._v("#")]),e._v(" Objects and Instances")]),e._v(" "),a("p",[e._v("When programming, it's convenient to cluster data into structures based on the "),a("em",[e._v("things")]),e._v(" in the game world. A character\nstructure owns variables for its health, position, movement attributes, etc., while articles, hitboxes, and even the\nstage have their own variables.")]),e._v(" "),a("p",[e._v("Most of a character's code works with the character's own variables, but you'll need to reference others to affect them.")]),e._v(" "),a("p",[e._v("An "),a("em",[e._v("object")]),e._v(' is a type, like "Character" or "Hitbox" or "Cat".')]),e._v(" "),a("p",[e._v("An "),a("em",[e._v("instance")]),e._v(' is an example of a type, like "the Zetterburn I\'m playing now" or "the hitbox I created from my\nftilt" or "my cat, Rosa".')]),e._v(" "),a("p",[e._v("Instances are made from objects. Instances contain variables, like my Zetterburn's current percent, and their object\ndetermines what variables they have, and how Rivals uses them.")]),e._v(" "),a("h2",{attrs:{id:"available-objects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#available-objects"}},[e._v("#")]),e._v(" Available Objects")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("oPlayer")]),e._v(" (Characters)")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("pHitBox")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("pHurtBox")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("obj_article1")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("obj_article2")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("obj_article3")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("obj_article_solid")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("obj_article_platform")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("hit_fx_obj")]),e._v(" (Visual effects created on hit)")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("oTestPlayer")]),e._v(" (Characters while in playtest mode, found on the character select screen or workshop screen.)")])])]),e._v(" "),a("h2",{attrs:{id:"basic-usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basic-usage"}},[e._v("#")]),e._v(" Basic Usage")]),e._v(" "),a("p",[a("code",[e._v("instance_id = instance_create(x, y, object)")]),e._v(" creates a new instance of the object.")]),e._v(" "),a("p",[a("code",[e._v("instance_destroy(instance_id)")]),e._v(" destroys the instance with that id. Be careful with this. It's usually best to let\narticles destroy themselves at the end of their "),a("code",[e._v("update")]),e._v(" script, so they don't disappear in the middle of doing\nsomething. "),a("code",[e._v("instance_destroy()")]),e._v(" with no arguments destroys the current instance, same as "),a("code",[e._v("instance_destroy(self)")]),e._v(".")]),e._v(" "),a("p",[e._v("You can access variables from other instances with "),a("code",[e._v(".")]),e._v(" syntax, such as:")]),e._v(" "),a("div",{staticClass:"language-gml extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("div",{staticClass:"highlighted"},[e._v("Â ")]),a("br")]),a("pre",{pre:!0,attrs:{class:"language-gml"}},[a("code",[e._v("vortex "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("instance_create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("y")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"obj_article1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nvortex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("vsp "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("\n")])])]),a("h2",{attrs:{id:"perspective"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#perspective"}},[e._v("#")]),e._v(" Perspective")]),e._v(" "),a("p",[e._v("Scripts are always run from the perspective of some instance, often the character instance. You can reference the current instance\nwith "),a("code",[e._v("self")]),e._v(", though that's rarely needed.")]),e._v(" "),a("p",[e._v("The "),a("RouterLink",{attrs:{to:"/workshop_guide/programming/learning_path/with.html"}},[e._v("with")]),e._v(" structure temporarily changes the perspective to an instance, or run code from the\nperspective of "),a("em",[e._v("all")]),e._v(" instances of a given object.")],1),e._v(" "),a("h3",{attrs:{id:"perspective-effects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#perspective-effects"}},[e._v("#")]),e._v(" Perspective Effects")]),e._v(" "),a("p",[e._v("Perspective is important for some functions:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Fetching functions ("),a("code",[e._v("asset_get")]),e._v(", "),a("code",[e._v("sound_get")]),e._v(") need to be of the perspective of the resource's character or an instance\nthat character owns, such as their article or hitbox.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("sound_play")]),e._v(" panning depends on the location of the caller.")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);